{"ast":null,"code":"import { LoginStart, LoginFailure, LoginSuccess, Logout, Register } from \"../actionTypes\";\nconst initialState = {\n  user: JSON.parse(localStorage.getItem(\"user\")) || {\n    email: \"\",\n    fullname: \"\",\n    username: \"\"\n  },\n  isLogged: false,\n  isRegistered: false,\n  isFetching: false\n};\nexport default function loginReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LoginStart:\n      return { ...state,\n        isFetching: true\n      };\n\n    case LoginSuccess:\n      return { ...state,\n        user: action.payload,\n        isFetching: false,\n        isLogged: true\n      };\n\n    case LoginFailure:\n      return { ...state,\n        isFetching: false,\n        isLogged: true\n      };\n\n    case Logout:\n      return { ...state,\n        isLogged: false\n      };\n\n    case Register:\n      return { ...state,\n        isRegistered: true\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/kunal/teqie/react-blog/client/src/store/reducers/loginreducer.tsx"],"names":["LoginStart","LoginFailure","LoginSuccess","Logout","Register","initialState","user","JSON","parse","localStorage","getItem","email","fullname","username","isLogged","isRegistered","isFetching","loginReducer","state","action","type","payload"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,YAArB,EAAmCC,YAAnC,EAAiDC,MAAjD,EAAyDC,QAAzD,QAAyE,gBAAzE;AAGA,MAAMC,YAAsB,GAAG;AAC3BC,EAAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,KAA6C;AAC/CC,IAAAA,KAAK,EAAE,EADwC;AAE/CC,IAAAA,QAAQ,EAAE,EAFqC;AAG/CC,IAAAA,QAAQ,EAAE;AAHqC,GADxB;AAM3BC,EAAAA,QAAQ,EAAE,KANiB;AAO3BC,EAAAA,YAAY,EAAE,KAPa;AAQ3BC,EAAAA,UAAU,EAAE;AARe,CAA/B;AAWA,eAAe,SAASC,YAAT,GAA+F;AAAA,MAAzEC,KAAyE,uEAAjEb,YAAiE;AAAA,MAAnDc,MAAmD;;AAC1G,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKpB,UAAL;AAAiB,aAAO,EACJ,GAAGkB,KADC;AAEJF,QAAAA,UAAU,EAAE;AAFR,OAAP;;AAKjB,SAAKd,YAAL;AAAmB,aAAO,EACN,GAAGgB,KADG;AAENZ,QAAAA,IAAI,EAAEa,MAAM,CAACE,OAFP;AAGNL,QAAAA,UAAU,EAAE,KAHN;AAINF,QAAAA,QAAQ,EAAE;AAJJ,OAAP;;AAOnB,SAAKb,YAAL;AAAmB,aAAO,EACN,GAAGiB,KADG;AAENF,QAAAA,UAAU,EAAE,KAFN;AAGNF,QAAAA,QAAQ,EAAE;AAHJ,OAAP;;AAKnB,SAAKX,MAAL;AAAc,aAAO,EACD,GAAGe,KADF;AAEDJ,QAAAA,QAAQ,EAAE;AAFT,OAAP;;AAId,SAAKV,QAAL;AAAe,aAAO,EACF,GAAGc,KADD;AAEFH,QAAAA,YAAY,EAAE;AAFZ,OAAP;;AAIf;AAAS,aAAOG,KAAP;AA1Bb;AA4BH","sourcesContent":["import { LoginStart, LoginFailure, LoginSuccess, Logout, Register } from \"../actionTypes\";\nimport { UserType } from \"../../types.d\";\n\nconst initialState: UserType = {\n    user: JSON.parse(localStorage.getItem(\"user\")) || ({\n        email: \"\",\n        fullname: \"\",\n        username: \"\",\n    }),\n    isLogged: false,\n    isRegistered: false,\n    isFetching: false,\n}\n\nexport default function loginReducer(state = initialState, action: { type: string, payload?: any}): UserType  {\n    switch(action.type) {\n        case LoginStart: return {\n                            ...state,\n                            isFetching: true\n                        }\n\n        case LoginSuccess: return {\n                            ...state,\n                            user: action.payload,\n                            isFetching: false,\n                            isLogged: true\n                        }\n\n        case LoginFailure: return {\n                            ...state,\n                            isFetching: false,\n                            isLogged: true,\n                        }\n        case Logout : return {\n                            ...state,\n                            isLogged: false\n                        }\n        case Register: return {\n                            ...state,\n                            isRegistered: true\n                        }\n        default: return state;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}