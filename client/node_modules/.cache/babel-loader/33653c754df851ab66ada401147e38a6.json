{"ast":null,"code":"var _jsxFileName = \"/home/kunal/teqie/react-blog/client/src/components/SinglePost.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport back from '../images/backgro.jpeg';\nimport store from '../store/store';\nimport { deleteBlog, fetchBlogbyId } from '../api/posts';\nimport '../index.scss';\nimport { fetchname } from '../api/user';\nimport { useDispatch, useSelector } from 'react-redux';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SinglePost() {\n  _s();\n\n  var _store$getState$login;\n\n  // useSelector is equivalent to mapStateToProps\n  const user = useSelector(state => state.login.user); // useDisaptch is equivalent to mapDispatchToProps\n  // const dispatch = useDispatch();\n\n  const location = useLocation(); // pathname: \"blogs/:34556rgfg7y56yyht7th\"\n\n  const path = location.pathname.split(\"/\")[2]; // console.log(path)\n\n  const [post, setPost] = useState({});\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [published, setPublished] = useState(false);\n  const [updateMode, setUpdateMode] = useState(false); // Whenever this path changes(_id changes) execute this function\n\n  useEffect(() => {\n    const getBlog = async () => {\n      try {\n        const res = await fetchBlogbyId(path);\n        setPost(res.data);\n        setTitle(res.data.title);\n        setBody(res.data.body);\n        setPublished(res.data.published);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    getBlog();\n  }, [path]); // handleChange(event) {\n  //     setState(() => {\n  //       return  {  \n  //         [event.target.name]: event.target.value,\n  //       }\n  //     })\n  // }\n\n  const handleDelete = async () => {\n    try {\n      await deleteBlog(post._id, user.username);\n      window.location.replace(\"/\");\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const handleUpdate = async () => {\n    try {\n      await updateBlog(post._id, user.username, title, body, published);\n      window.location.reload();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"singlepost\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"singlepost-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: post.imageURL ? post.imageURL : back,\n        className: \"singlepost-image\",\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), updateMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: title,\n        className: \"singlepost-title-input\",\n        onChange: e => setTitle(e.target.value),\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 34\n      }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"singlepost-title\",\n        children: [post.title, post.username === ((_store$getState$login = store.getState().login.user) === null || _store$getState$login === void 0 ? void 0 : _store$getState$login.username) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"singlepost-edit\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"singlepost-icon fa-solid fa-pen-to-square\",\n            onClick: () => setUpdateMode(true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"singlepost-icon fa-solid fa-trash-can\",\n            onClick: handleDelete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"singlepost-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"singlepost-author\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: `/?user=${post.username}`,\n            className: \"link\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: post.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"singlepost-date\",\n          children: new Date(post.createdAt).toDateString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [updateMode ? /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"singlepost-desc-input\",\n          value: body,\n          onChange: e => setBody(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 26\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"singlepost-desc\",\n          children: post.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"singlepost-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"singlepost-draft\",\n            value: !published,\n            onClick: () => setPublished(false),\n            disabled: !published,\n            children: \"DRAFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"singlepost-draft\",\n            value: published,\n            onClick: () => setPublished(true),\n            disabled: !published,\n            children: \"PUBLISHED\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"singlepost-button\",\n            onClick: handleUpdate,\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SinglePost, \"lQra03GzJwrQ1+thDqg/noMSg2Q=\", false, function () {\n  return [useSelector, useLocation];\n});\n\n_c = SinglePost;\n\nvar _c;\n\n$RefreshReg$(_c, \"SinglePost\");","map":{"version":3,"sources":["/home/kunal/teqie/react-blog/client/src/components/SinglePost.jsx"],"names":["useEffect","useState","Link","useLocation","back","store","deleteBlog","fetchBlogbyId","fetchname","useDispatch","useSelector","axios","SinglePost","user","state","login","location","path","pathname","split","post","setPost","title","setTitle","body","setBody","published","setPublished","updateMode","setUpdateMode","getBlog","res","data","err","console","log","handleDelete","_id","username","window","replace","handleUpdate","updateBlog","reload","imageURL","e","target","value","getState","Date","createdAt","toDateString"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport {Link, useLocation } from 'react-router-dom'\nimport back from '../images/backgro.jpeg'\nimport store from '../store/store';\nimport { deleteBlog, fetchBlogbyId } from '../api/posts';\nimport '../index.scss';\nimport { fetchname } from '../api/user';\nimport { useDispatch, useSelector } from 'react-redux';\nimport axios from 'axios';\n\nexport default function SinglePost() {\n\n    // useSelector is equivalent to mapStateToProps\n    const user = useSelector(state => state.login.user);\n    // useDisaptch is equivalent to mapDispatchToProps\n    // const dispatch = useDispatch();\n    const location = useLocation();\n    // pathname: \"blogs/:34556rgfg7y56yyht7th\"\n    const path = location.pathname.split(\"/\")[2]; \n    // console.log(path)\n    const [post, setPost] = useState({});\n    const [title, setTitle] = useState(\"\");\n    const [body, setBody] = useState(\"\");\n    const [published, setPublished] = useState(false);\n    const [updateMode, setUpdateMode] = useState(false);\n\n    // Whenever this path changes(_id changes) execute this function\n    useEffect(() => {\n        const getBlog = async () => {\n        try {\n                const res = await fetchBlogbyId(path);\n                setPost(res.data);\n                setTitle(res.data.title);\n                setBody(res.data.body);\n                setPublished(res.data.published);\n            }\n            catch(err) {\n                console.log(err);\n            }\n        }\n        getBlog();\n    },[path]);\n\n    // handleChange(event) {\n    //     setState(() => {\n    //       return  {  \n    //         [event.target.name]: event.target.value,\n    //       }\n    //     })\n    // }\n\n\n    const handleDelete = async () => {\n        try {\n            await deleteBlog(post._id, user.username);\n            window.location.replace(\"/\");\n        }\n        catch(err) {\n            console.log(err);\n        }\n    }\n\n    const handleUpdate = async () => {\n        try {\n            await updateBlog(post._id, user.username, title, body, published);\n            window.location.reload();\n        }\n        catch(err)\n        {\n            console.log(err);\n        }\n    }\n\n\n    return (\n        <div className=\"singlepost\">\n            <div className=\"singlepost-wrapper\">\n                <img src={post.imageURL ? post.imageURL : back} \n                    className=\"singlepost-image\" alt=\"\" />\n                {\n                    updateMode ? <input \n                                    type=\"text\" \n                                    value={title} \n                                    className=\"singlepost-title-input\"\n                                    onChange={(e) => setTitle(e.target.value)}\n                                    autoFocus\n                                /> :\n                    (\n                        <h1 className=\"singlepost-title\">\n                        {post.title}\n                        {post.username === store.getState().login.user?.username &&\n                        (<div className=\"singlepost-edit\">\n                            <i \n                                className=\"singlepost-icon fa-solid fa-pen-to-square\"\n                                onClick={() => setUpdateMode(true)}\n                                ></i>\n                            <i \n                                className=\"singlepost-icon fa-solid fa-trash-can\" \n                                onClick={handleDelete}\n                                ></i>\n                        </div>)}\n                        </h1>\n                    )\n                }\n                <div className=\"singlepost-info\">\n                    <span className=\"singlepost-author\">\n                        <Link to={`/?user=${post.username}`} className=\"link\">\n                        <b>{post.username}</b> \n                         {/* Change Above  instead of username it should be username*/}\n                        </Link>\n                    </span>\n                    <span className=\"singlepost-date\">\n                        {new Date(post.createdAt).toDateString()}\n                    </span>\n                </div>\n                <div>\n                    {updateMode ?\n                        (<textarea \n                            className='singlepost-desc-input'\n                            value={body}\n                            onChange={(e) => setBody(e.target.value)}\n                        /> ) :\n                    (<p className=\"singlepost-desc\">\n                        {post.body}\n                    </p>\n                    )}\n                    <div className='singlepost-buttons'>\n                        <button \n                            className=\"singlepost-draft\"\n                            value={!published}\n                            onClick={() => setPublished(false)}\n                            disabled={!published}\n                            >\n                        DRAFT\n                        </button>\n                        <button \n                            className=\"singlepost-draft\"\n                            value={published}\n                            onClick={() => setPublished(true)}\n                            disabled={!published}\n                            >\n                        PUBLISHED\n                        </button>\n                        <button \n                            className=\"singlepost-button\"\n                            onClick={handleUpdate}\n                            >\n                        Update\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}